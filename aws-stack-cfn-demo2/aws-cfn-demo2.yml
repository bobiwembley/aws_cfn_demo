Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small]
  KeyName:
      Description: ssh private key to connect to ec2
      Type: AWS::EC2::KeyPair::KeyName
      Default: cloud ssh -i "cloud.pem" ubuntu@ec2-107-20-20-195.compute-1.amazonaws.com
      ConstraintDescription: Must be a keyPair existing on AWS account     
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-083654bd07b5da81d
    us-east-2:
      AMI: ami-0629230e074c580f2
Resources:
  VpcWebServer:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC-WebServer
  VpcWebServerPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
       CidrBlock: 10.10.0.0/24
       AvailabilityZone:  !Select [ 0, !GetAZs ]
       MapPublicIpOnLaunch: true 
       VpcId: 
         Ref: 'VpcWebServer'
       Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Public-WebServer
  VpcDatabasePrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref 'VpcWebServer'
      CidrBlock: 10.10.1.0/24
      Tags:
        - Key: WebServerPrivateServer
          Value: !Sub ${AWS::StackName}-Private-WebServer 
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VpcWebServer
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VpcWebServer
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcWebServer
      Tags:
      - Key: Name
        Value: PublicRouteWebServer
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VpcWebServerPublicSubnet
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      SecurityGroupIds: 
        - !GetAtt WebSecurityGroup.GroupId 
      SubnetId: !Ref VpcWebServerPublicSubnet
      Tags:
      - Key: Name 
        Value: !Sub "${AWS::StackName}-InstanceID"
  DatabaseWebServer:
    Type: AWS::RDS::DBInstance
    Properties:
       AllocatedStorage: '5'
       DBInstanceClass: db.t3.micro
       DBName: KoukaDb
       MasterUsername: KoukaUser
       MasterUserPassword: KoukaPwd
       Engine: mysql
       EngineVersion: 5.7
       DBSubnetGroupName: !Ref DatabaseSubnetgroup 
       VPCSecurityGroups:
         - !Ref DatabaseSecurityGroup
       Tags:
         - Key: name
           Value: db-Webserver
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and http on Ec2 WebServer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcWebServer
  DatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Database instances security group"
      VpcId: !Ref VpcWebServer
      SecurityGroupIngress: 
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.10.0.0/24
      SecurityGroupEgress: 
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
  DatabaseSubnetgroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:  Private  Subnet for  RDS database
      SubnetIds:
        - !Ref VpcWebServerPublicSubnet
        - !Ref VpcDatabasePrivateSubnet
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VpcWebServer
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"